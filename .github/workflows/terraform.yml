name: EC2 DVC Training via Terraform & SSH

on:
  push:
    branches:
      - 'feature/bts-13-terraform'
  workflow_dispatch:

jobs:
  terraform_deployment:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.read_ip.outputs.ec2_ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.3.0'

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init & Validate
        run: |
          cd terraform
          terraform init -input=false
          terraform validate

      - name: Terraform Plan & Apply
        run: |
          cd terraform
          terraform init -input=false
          terraform apply -auto-approve
      
      # - name: Get EC2 Public IP
      #   id: get_ip
      #   run: |
      #     cd terraform
      #     terraform_output=$(terraform output -raw ec2_public_ip)
      #     CLEAN_IP=$(echo "$terraform_output" | tr -d '\r' | sed 's/[^0-9.]//g' | awk 'BEGIN{FS="."} {if(NF==4) print $1"."$2"."$3"."$4}')
      #     echo "Cleaned IP: $CLEAN_IP"
      #     if [[ ! "$CLEAN_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      #       echo "Error: Invalid IP address format!"
      #       exit 1
      #     fi
      #     echo "ec2_ip=$CLEAN_IP" >> "$GITHUB_ENV"  # Export the cleaned IP address to GITHUB_ENV
      #     echo "::set-output name=ec2_ip::$CLEAN_IP"  # Also set the output for the job
      
      # - name: Save EC2 Public IP to File
      #   run: |
      #     cd terraform
      #     terraform output -raw ec2_public_ip > ec2_public_ip.txt
          
      - name: Read EC2 Public IP from File
        id: read_ip
        run: |
          ec2_ip=$(cat terraform/ec2_public_ip.txt)
          echo "EC2 Public IP: $ec2_ip"
          echo "ec2_ip=$ec2_ip" >> "$GITHUB_OUTPUT"
   # echo "::set-output name=ec2_ip::$ec2_ip"
 
  remote_train:
    runs-on: ubuntu-latest
    needs: terraform_deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Echo EC2 Public IP
        run: |
          echo "EC2 Public IP from terraform_deployment job: ${{ needs.terraform_deployment.outputs.ec2_ip }}"
 




  # remote_train:
  #   runs-on: ubuntu-latest
  #   needs: terraform_deployment
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: SSH into EC2 and Run Training Script
  #       uses: appleboy/ssh-action@v1.0.0
  #       with:
  #         host: ${{ needs.terraform_deployment.outputs.ec2_ip }}
  #         username: ubuntu
  #         key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
  #         script: |
  #           echo "Connected to EC2"

  #           sudo apt update -y && sudo apt upgrade -y
  #           sudo apt install -y python3 python3-pip git

  #           mkdir -p ~/.ssh
  #           chmod 700 ~/.ssh
  #           echo "${{ secrets.GIT_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
  #           chmod 600 ~/.ssh/id_rsa
  #           ssh-keyscan github.com >> ~/.ssh/known_hosts
  #           ssh-keyscan ${{ needs.terraform_deployment.outputs.ec2_ip }} >> ~/.ssh/known_hosts

  #           git clone git@github.com:Shoaib720/asl-mlops.git
  #           cd asl-mlops
  #           git checkout feature/bts-13-terraform

  #           pip3 install virtualenv
  #           virtualenv .venv
  #           source .venv/bin/activate

  #           pip install -r requirements.txt
  #           pip install dvc[s3]

  #           dvc pull
  #           dvc repro
  #           dvc push
