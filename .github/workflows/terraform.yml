name: EC2 DVC Training via Terraform & SSH

on:
  push:
    branches:
      - 'feature/bts-13-terraform'
  workflow_dispatch:

jobs:
  # terraform_validate:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: '1.3.0'

  #     - name: Set up AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1

  #     - name: Terraform Validate
  #       run: |
  #         cd terraform
  #         terraform init -input=false
  #         terraform validate

  # terraform_plan:
  #   runs-on: ubuntu-latest
  #   needs: terraform_validate
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: '1.3.0'

  #     - name: Set up AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1

  #     - name: Terraform Plan
  #       run: |
  #         cd terraform
  #         terraform init -input=false
  #         terraform plan

  terraform_apply:
    runs-on: ubuntu-latest
    # needs: terraform_plan
    outputs:
      ec2_ip: ${{ steps.get_ip.outputs.ec2_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.3.0'

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Apply
        run: |
          cd terraform
          terraform init -input=false
          terraform apply -auto-approve

      # - name: Get EC2 Public IP
      #   id: get_ip
      #   run: |
      #     cd terraform
      #     echo $(terraform output -raw ec2_public_ip | tr -d '\r\n')
      #     echo "ec2_ip=$(terraform output -raw ec2_public_ip | tr -d '\r\n')" >> "$GITHUB_OUTPUT"
      - name: Get EC2 Public IP
        id: get_ip
        run: |
          cd terraform
          IP=$(terraform output -raw ec2_public_ip | tr -d '\r\n')
          echo "ec2_ip=$IP" >> $GITHUB_OUTPUT

  remote_train:
    runs-on: ubuntu-latest
    needs: terraform_apply
    steps:
      - name: SSH into EC2 and Run Training Script
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ needs.terraform_apply.outputs.ec2_ip }}
          username: ubuntu
          key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
          script: |
            echo "âœ… Connected to EC2"

            sudo apt update -y
            sudo apt install -y python3 python3-pip git
            
            mkdir -p ~/.ssh
            chmod 700 ~/.ssh
            echo "${{ secrets.GIT_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            ssh-keyscan ${{ needs.terraform_apply.outputs.ec2_ip }} >> ~/.ssh/known_hosts

            git clone git@github.com:Shoaib720/asl-mlops.git
            cd asl-mlops
            git checkout feature/bts-13-terraform

            pip3 install virtualenv
            virtualenv .venv
            source .venv/bin/activate

            pip install -r requirements.txt
            pip install dvc[s3]

            dvc pull
            dvc repro
            dvc push
