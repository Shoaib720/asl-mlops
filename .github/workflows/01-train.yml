name: Train Model

on:
  workflow_dispatch:
  push:
    branches:
      - "refactor/terraform-scripts"

jobs:
  provision:
    name: Provision
    environment: TRAIN
    runs-on: ubuntu-latest
    outputs:
      vm_ip: ${{ steps.output-ip.outputs.vm_ip }}
    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: 📁 Configure SSH Key Pair
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.TRAIN_SERVER_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.TRAIN_SERVER_SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          ls -al ~/.ssh

      - name: 📦 Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: 📝 Write GitHub Keys to File
        run: |
          echo "${{ secrets.TRAIN_SERVER_GITHUB_RSA }}" > ~/.ssh/train_server_github_rsa
          chmod 600 ~/.ssh/train_server_github_rsa
          ls -al ~/.ssh

      - name: 🌱 Terraform Init
        run: |
          pushd ./terraform
          terraform init
          popd

      - name: 🚀 Terraform Apply
        run: |
         pushd ./terraform
         terraform apply -auto-approve
         popd

      - name: Output EC2 Public IP
        id: output-ip
        run: |
          pushd ./terraform
          echo "vm_ip=$(terraform output -raw vm_public_ip)" >> $GITHUB_OUTPUT
          popd

      # - name: 🧨 Terraform Destroy
      #   if: always()
      #   run: |
      #     pushd ./terraform
      #     terraform destroy -auto-approve -var="mlflow_tracking_uri=${{ vars.MLFLOW_TRACKING_URI }}" -var="epochs=${{ vars.EPOCHS }}"
      #     popd

      - name: Cleanup
        run: |
          rm -f ~/.ssh/train_server_github_rsa ~/.ssh/id_rsa*

  train:
    name: Train
    environment: TRAIN
    runs-on: ubuntu-latest
    needs: provision
    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v4

      - name: 📁 Configure SSH Key Pair
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.TRAIN_SERVER_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.TRAIN_SERVER_SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          ls -al ~/.ssh

      - name: Set permissions
        run: chmod 600 ~/.ssh/id_rsa

      - name: Copy deploy script to server
        run: |
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no scripts/deploy.sh ubuntu@${{ needs.provision.outputs.vm_ip }}:/home/ubuntu/deploy.sh

      - name: SSH and run deploy
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ needs.provision.outputs.vm_ip }} \
          "MLFLOW_TRACKING_URI='${{ vars.MLFLOW_TRACKING_URI }}' EPOCHS='${{ vars.EPOCHS }}' ACCURACY_THRESHOLD='${{ vars.ACCURACY_THRESHOLD }}' bash /home/ubuntu/deploy.sh"